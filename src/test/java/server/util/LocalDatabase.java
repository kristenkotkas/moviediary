package server.util;

import com.mysql.cj.jdbc.MysqlDataSource;
import io.vertx.core.json.JsonObject;
import io.vertx.rxjava.core.Future;
import io.vertx.rxjava.core.Vertx;
import io.vertx.rxjava.ext.jdbc.JDBCClient;
import server.service.DatabaseService;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

import static io.vertx.rxjava.core.Future.future;
import static server.util.CommonUtils.ifPresent;

/**
 * @author <a href="https://bitbucket.org/kristjanhk/">Kristjan Hendrik KÃ¼ngas</a>
 */
public class LocalDatabase {
    private static final String SQL_CREATE_USERS = "CREATE TABLE Users (" +
            "    Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
            "    Firstname VARCHAR(100) NOT NULL,\n" +
            "    Lastname VARCHAR(100) NOT NULL,\n" +
            "    Username VARCHAR(100) NOT NULL,\n" +
            "    Password VARCHAR(64) DEFAULT 'NULL',\n" +
            "    Salt VARCHAR(16) DEFAULT 'default' NOT NULL)";
    private static final String SQL_CREATE_SETTINGS = "CREATE TABLE Settings (" +
            "  Id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
            "  RuntimeType VARCHAR(100) DEFAULT 'default' NOT NULL,\n" +
            "  Username    VARCHAR(100)                   NOT NULL,\n" +
            "  Verified    VARCHAR(64) DEFAULT '0'        NOT NULL);";
    private static final String SQL_INSERT_USER = "INSERT INTO Users (Username, Firstname, Lastname, Password, Salt) " +
            "VALUES ('unittest@kyngas.eu', 'Form', 'Tester', " +
            "'d7d1b328a56a8c8bfd6dd4e3d9006365d3496b523ac4ff37bc68679b5433b486', 'f44a65de25274188')";
    private static final String SQL_INSERT_SETTING = "INSERT INTO Settings (Username, RuntimeType, Verified) " +
            "VALUES ('unittest@kyngas.eu', 'default', '1')";
    private static final String SQL_DROP_ALL_CONTENT = "TRUNCATE SCHEMA public AND COMMIT;";

    private final JDBCClient client;

    private LocalDatabase(Vertx vertx, JsonObject config) {
        DatabaseService.Column.setTesting(); //notifies databaseService that columnNames are in upperCase
        this.client = JDBCClient.createShared(vertx, config);
    }

    public JDBCClient getClient() {
        return client;
    }

    public static Future<LocalDatabase> initializeDatabase(Vertx vertx, JsonObject config) {
        return future(fut -> ifPresent(new LocalDatabase(vertx, config
                .put("url", "jdbc:hsqldb:mem:test?shutdown=true&user")
                .put("driver_class", "org.hsqldb.jdbcDriver")
                .put("max_pool_size", 30)), db -> db
                .initialize()
                .rxSetHandler()
                .subscribe(r -> fut.complete(db), fut::fail)));
    }

    public Future<Void> initialize() {
        return future(fut -> client.rxGetConnection()
                .flatMap(conn -> conn.rxUpdate(SQL_CREATE_USERS)
                        .flatMap(res -> conn.rxUpdate(SQL_CREATE_SETTINGS))
                        .flatMap(res -> conn.rxUpdate(SQL_INSERT_USER))
                        .flatMap(res -> conn.rxUpdate(SQL_INSERT_SETTING))
                        .doAfterTerminate(conn::close))
                .subscribe(res -> fut.complete(), fut::fail));
    }

    public Future<Void> reset() {
        return future(fut -> client.rxGetConnection()
                .flatMap(conn -> conn.rxExecute(SQL_DROP_ALL_CONTENT).doAfterTerminate(conn::close))
                .doOnError(fut::fail)
                .flatMap(res -> initialize().rxSetHandler())
                .subscribe(res -> fut.complete(), fut::fail));
    }

    @SuppressWarnings("unused")
    private void test() throws SQLException {
        DataSource dataSource = new MysqlDataSource();
        Connection conn = dataSource.getConnection();
        conn.prepareStatement(SQL_CREATE_USERS);
        conn.prepareStatement(SQL_CREATE_SETTINGS);
        conn.prepareStatement(SQL_INSERT_USER);
        conn.prepareStatement(SQL_INSERT_SETTING);
        conn.prepareStatement(SQL_DROP_ALL_CONTENT);
    }
}
